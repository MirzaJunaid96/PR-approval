#!/bin/bash

# Path to the commit message file passed to the commit-msg hook
COMMIT_MSG_FILE="$1"

# Read the commit message
COMMIT_MSG=$(cat "$COMMIT_MSG_FILE")

# Minimum length of the commit message
MIN_LENGTH=10

# Define the valid prefixes pattern for commit message validation
# The pattern enforces <task-id>: <type>: <message> format with specified types
valid_prefixes="^[a-zA-Z0-9\-]+: (feature|fix|bug|bugfix|chore|maintenance|refactor|optimization|hotfix|release): .+"

# Check if the commit message is empty
if [ -z "$COMMIT_MSG" ]; then
  echo "Error: Commit message cannot be empty."
  exit 1
fi

# Check if the commit message meets the minimum length
if [ ${#COMMIT_MSG} -lt $MIN_LENGTH ]; then
  echo "Error: Commit message is too short. Must be at least $MIN_LENGTH characters."
  exit 1
fi

# Check if the commit message matches the required valid prefixes pattern
if ! [[ "$COMMIT_MSG" =~ $valid_prefixes ]]; then
  echo "Error: Your commit message must follow this format:"
  echo "  <task-id>: <type>: <message>"
  echo "Where <type> is one of the following:"
  echo "  - feature: Adds a new feature or functionality."
  echo "  - fix or bug: Fixes a bug or issue."
  echo "  - bugfix: Fixes a bug or issue."
  echo "  - chore: Routine tasks or maintenance updates."
  echo "  - maintenance: General upkeep or improvements."
  echo "  - refactor: Code changes that improve structure without altering behavior."
  echo "  - optimization: Enhancements that improve performance."
  echo "  - hotfix: Critical fixes that need immediate attention."
  echo "  - release: Prepares the code for a new release."
  echo "And <task-id> should be alphanumeric, e.g., '123' or 'ABC-456'."
  echo
  echo "Example of a valid commit command:"
  echo '  git commit -m "ABC-123: feature: add new authentication module"'
  exit 1
fi

# If all checks pass, allow the commit
exit 0
